// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    role Role @default(STUDENT)

    teacher Teacher?

    // teacher Teacher @relation(fields: [teacherId], references: [id])
    // teacherId? String @unique
}

enum Role {
    ADMIN
    TEACHER
    ELDER
    STUDENT
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}



// для расписания


model Teacher {
    id         String  @id @default(cuid())
    surname    String
    name       String
    fathername String?

    teacherDisc TeacherDiscipline[]
    Schedule Schedule[]

    user   User? @relation(fields: [userId], references: [id])
    userId String?  @unique
}


model Discipline {
    id         String   @id @default(cuid())
    name       String
    semesters  Int?
    subgroups  Boolean? @default(false)

    discTeacher TeacherDiscipline[]
    discSpec SpecialityDisc[]
    schedule Schedule[]
}


model TeacherDiscipline {
    id        String       @id @default(cuid())

    teacher   Teacher @relation(fields: [teacherId], references: [id])
    teacherId String

    discipline  Discipline @relation(fields: [disciplineId], references: [id])
    disciplineId String

    lectures     Boolean?     @default(true)
    subgroup     Int?
}


model Speciality {
    id       String @id @default(cuid())
    name     String
    code     String
    years    Int

    Group Group[]
    SpecDisc SpecialityDisc[]
}


model Group {
    id       String @id @default(cuid())
    name     String
    year     Int
    students Int

    speciality Speciality @relation(fields: [specialityId], references: [id])
    specialityId String

    Schedule Schedule[]
}


model SpecialityDisc {
    id String @id @default(cuid())

    speciality Speciality @relation(fields: [specialityId], references: [id])
    specialityId String

    discipline Discipline @relation(fields: [disciplineId], references: [id])
    disciplineId String

    AcademicPlan AcademicPlan[]
}


model AcademicPlan {
    id         String @id @default(cuid())
    semester   Int
    lestures   Int
    practise   Int
    labs       Int
    ksr        Int
    coursework Boolean? @default(false)
    exam       Boolean? @default(false)
    
    discSpec SpecialityDisc @relation(fields: [specDiscId], references: [id])
    specDiscId String
}


model Classroom {
    id        String @id @default(cuid())
    name      String
    seats     Int
    projector Boolean @default(false)
    computers Int     @default(0)

    Schedule Schedule[]
}


model Schedule {
    id       String @id @default(cuid())
    evenWeek Boolean @default(false)
    day      String
    lesson   Int

    subgroup Int?
    lessontype String

    group Group @relation(fields: [groupId], references: [id])
    groupId String

    discipline Discipline @relation(fields: [disciplineId], references: [id])
    disciplineId String

    teacher   Teacher @relation(fields: [teacherId], references: [id])
    teacherId String

    classroom Classroom @relation(fields: [classroomID], references: [id])
    classroomID String
}


